package CircularQueue;

/*Create a queue based on stack
 * 1.push
 * 2.pop
 * 3.peek
 * 4.isFull
 * 5.isEmpty
 * */

public class CircularQueue{
	
	private int [] arr;
	private int front;
	private int rear;
	
	public CircularQueue(int val){
		arr = new int[val];
		front = -1;
		rear = -1;
	}
	
	
	public void push(int val)
	{
		if(isFull())
		{
			System.out.println("Stack is full cannot perform push operation");
		}
		else {
		rear = (rear+1)%arr.length;
		arr[rear] = val;
		}
	}
	
	public int pop()
	{
		if(isEmpty())
		{
			System.out.println("Queue is empty, cannot perform pop operation");
			return -1;
		}
	else {
		front =(front+1)%arr.length;
		int temp = front;
	if(front == rear)
	{
		rear = -1;
		front = -1;
	}
	return arr[temp];
	     }
	}
	
	public int peek()
	{  int temp = (front+1)%arr.length; // we have to find the next circular element index
		return arr[temp];
	}
	
	public boolean isFull()
	{
		return (front == -1 && rear == arr.length-1)||(front == rear && front != -1);
	}
	
	public boolean isEmpty()
	{
		return (front == rear && front == -1);
	}
	
	public void printQueue()
	{
		for(int i = 0; i< arr.length;i++)
		{
			System.out.println(arr[i]+" ");
			
		}
	}
}